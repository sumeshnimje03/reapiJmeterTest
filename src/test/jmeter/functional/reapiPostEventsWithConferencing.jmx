<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ReapiPostEventsWithConferencing" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__property(protocol,,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__property(host,,runscope-auto.master.tst.xmatters.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__property(username,,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__property(password,,complex)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeout_ms" elementType="Argument">
            <stringProp name="Argument.name">timeout_ms</stringProp>
            <stringProp name="Argument.value">${__property(timeout_ms,,20000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version5" elementType="Argument">
            <stringProp name="Argument.name">version5</stringProp>
            <stringProp name="Argument.value">${__property(version5,,2015-04-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version4" elementType="Argument">
            <stringProp name="Argument.name">version4</stringProp>
            <stringProp name="Argument.value">${__property(version4,,2015-01-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version3" elementType="Argument">
            <stringProp name="Argument.name">version3</stringProp>
            <stringProp name="Argument.value">${__property(version3,,2014-06-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version2" elementType="Argument">
            <stringProp name="Argument.name">version2</stringProp>
            <stringProp name="Argument.value">${__property(version2,,2013-12-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="version1" elementType="Argument">
            <stringProp name="Argument.name">version1</stringProp>
            <stringProp name="Argument.value">${__property(version1,,2012-03-01)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Distster1" elementType="Argument">
            <stringProp name="Argument.name">Distster1</stringProp>
            <stringProp name="Argument.value">${__property(Distster1,,a4388a2c-9c52-452c-abd1-ef4fd9579b0a)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Disaster" elementType="Argument">
            <stringProp name="Argument.name">Disaster</stringProp>
            <stringProp name="Argument.value">${__property(Disaster,,0dc17ad4-cd81-433c-b396-128930d954e4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="recipient" elementType="Argument">
            <stringProp name="Argument.name">recipient</stringProp>
            <stringProp name="Argument.value">${__property(recipient,,user11)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="callBackURL" elementType="Argument">
            <stringProp name="Argument.name">callBackURL</stringProp>
            <stringProp name="Argument.value">${__property(callBackURL,,http://requestb.in/1jjuf481)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ExternalConference" elementType="Argument">
            <stringProp name="Argument.name">ExternalConference</stringProp>
            <stringProp name="Argument.value">${__property(ExternalConference,,f8471084-97e1-44a2-9a3a-eadcb22d5b29)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">xMatters/535.0.10 CFNetwork/672.1.15 Darwin/14.0.0</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout">${timeout_ms}</stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${protocol}://${host}</stringProp>
            <stringProp name="Authorization.username">${username}</stringProp>
            <stringProp name="Authorization.password">${password}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
      </AuthManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POST Event with conferencing - (Version: 2015-04-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460612324000</longProp>
        <longProp name="ThreadGroup.end_time">1460612324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="No Conference Section - v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;&amp;{recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Distster1}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Limit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1824">99</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Org-Name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1499406765">runscope-auto</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Resource" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1481048534">FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with no conference name - v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id2&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference name is equal to null - v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:null&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id3&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference section only - v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id4</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id4&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Event with external conference - v.${version5}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;Webex Meeting&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${ExternalConference}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id5</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id5&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POST Event with conferencing - (Version: 2015-01-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460612324000</longProp>
        <longProp name="ThreadGroup.end_time">1460612324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="No Conference Section - v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;&amp;{recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Distster1}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Limit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1824">99</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Org-Name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1499406765">runscope-auto</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Resource" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1481048534">FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with no conference name - v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id2&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference name is equal to null - v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:null&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id3&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference section only - v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id4</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id4&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Event with external conference - v.${version4}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;Webex Meeting&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${ExternalConference}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id5</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id5&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POST Event with conferencing - (Version: 2014-06-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460612324000</longProp>
        <longProp name="ThreadGroup.end_time">1460612324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="No Conference Section - v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;&amp;{recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Distster1}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Limit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1824">99</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Org-Name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1499406765">runscope-auto</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Resource" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1481048534">FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with no conference name - v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id2&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference name is equal to null - v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:null&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id3&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference section only - v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id4</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id4&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Event with external conference - v.${version3}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;Webex Meeting&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${ExternalConference}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id5</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id5&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POST Event with conferencing - (Version: 2013-12-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460612324000</longProp>
        <longProp name="ThreadGroup.end_time">1460612324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="No Conference Section - v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;&amp;{recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Distster1}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Limit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1824">99</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Org-Name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1499406765">runscope-auto</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Resource" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1481048534">FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with no conference name - v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id2&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference name is equal to null - v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:null&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id3&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference section only - v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id4</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id4&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Event with external conference - v.${version2}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;Webex Meeting&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${ExternalConference}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id5</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id5&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POST Event with conferencing - (Version: 2012-03-01)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460612324000</longProp>
        <longProp name="ThreadGroup.end_time">1460612324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="No Conference Section - v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;&amp;{recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Distster1}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Limit" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1824">99</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Org-Name" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1499406765">runscope-auto</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Header: X-Rate-Limit-Resource" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1481048534">FormEventPost</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with no conference name - v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id2&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference name is equal to null - v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:null&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id3&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Event with conference section only - v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${Disaster}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id4</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id4&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Event with external conference - v.${version1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
                &quot;properties&quot;:&#xd;
                {&#xd;
                                &quot;text&quot;:&quot;Thisisatestmessage&quot;,&#xd;
                                &quot;bol&quot;:false,&#xd;
                                &quot;Hierarchy&quot;:[&quot;Level 1&quot;,&quot;H1&quot;],&#xd;
                                &quot;number&quot;:180099912345,&#xd;
                                &quot;List&quot;:&quot;List1&quot;,&#xd;
                                &quot;Combo&quot;:&quot;Value A and Value B&quot;&#xd;
                },&#xd;
                &quot;recipients&quot;:[&#xd;
                                {&quot;targetName&quot;:&quot;${recipient}&quot;}&#xd;
                ],&#xd;
                &quot;callbacks&quot;:[&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;status&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;deliveryStatus&quot;&#xd;
                                },&#xd;
                                {&#xd;
                                                &quot;url&quot;:&quot;${callBackURL}&quot;,&#xd;
                                                &quot;type&quot;:&quot;response&quot;&#xd;
                                }&#xd;
],&#xd;
&quot;conferences&quot;: [&#xd;
{&#xd;
&quot;name&quot;:&quot;Webex Meeting&quot;&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/reapi/${version5}/forms/${ExternalConference}/triggers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Event ID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">id5</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">test</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import com.eclipsesource.json.*;
import org.skyscreamer.jsonassert.*;

String jsonString = prev.getResponseDataAsString();
// Grab output JSON and print out as a string
JsonObject responseBody = Json.parse(jsonString).asObject();
String resultText = responseBody.toString();
String storedId = vars.get(&quot;id5&quot;);
log.info(&quot;Here is the output JSON: &quot; + resultText);

JsonObject eventID = new JsonObject();
eventID.add(&quot;id&quot;, storedId);

log.info(&quot;Here is the expect JSON: &quot; + eventID.toString());
// Check for object equivalence
JSONCompareResult result = JSONCompare.compareJSON(eventID.toString(), resultText, JSONCompareMode.NON_EXTENSIBLE);
if (result.failed()) {
	Failure = true;
	FailureMessage = &quot;The result JSON does not match the expected JSON.\n&quot; + result.getMessage();
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message: OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
